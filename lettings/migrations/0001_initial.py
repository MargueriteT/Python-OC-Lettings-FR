# Generated by Django 3.0 on 2022-02-15 10:12


from django.db import migrations, models
from django.core.validators import MaxValueValidator, MinLengthValidator


def update_contentypes(apps, schema_editor):
    """
    Updates content types.
    We want to have the same content type id, when the model is moved.
    """
    ContentType = apps.get_model('contenttypes', 'ContentType')
    db_alias = schema_editor.connection.alias
    # Move the Address model to lettings
    qs = ContentType.objects.using(db_alias).filter(
        app_label='oc_lettings_site', model='Address')
    qs.update(app_label='lettings')


def update_contentypes_reverse(apps, schema_editor):
    """
    Reverts changes in content types.
    """
    ContentType = apps.get_model('contenttypes', 'ContentType')
    db_alias = schema_editor.connection.alias
    # Move the TrackingAlert model to tracking
    qs = ContentType.objects.using(db_alias).filter(
        app_label='oc_lettings_site', model='Address')
    qs.update(app_label='lettings')


class Migration(migrations.Migration):
    dependencies = [('oc_lettings_site', '0002_auto_20220215_1109')
                    ]
    state_operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                (
                    'id', models.AutoField(auto_created=True, primary_key=True,
                                           serialize=False,
                                           verbose_name='ID')),
                ('number', models.PositiveIntegerField(validators=[
                    MaxValueValidator(9999)])),
                ('street', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('state', models.CharField(max_length=2, validators=[
                    MinLengthValidator(2)])),
                ('zip_code',
                 models.PositiveIntegerField(validators=[MaxValueValidator(
                     99999)])),
                ('country_iso_code', models.CharField(max_length=3,
                                                      validators=[
                                                          MinLengthValidator(
                                                              3)
                                                      ]))

            ],
        ),

    ]
    database_operations = [
        migrations.RunPython(update_contentypes,
                             update_contentypes_reverse),
    ]
    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=state_operations,
            database_operations=database_operations
        ),
    ]
